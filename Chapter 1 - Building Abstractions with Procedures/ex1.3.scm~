; Exercise 1.3. Define a procedure that takes three numbers as arguments and returns the sum of the
; squares of the two larger numbers.

(define (sum-square-max-two a b c)
    (define (square x) (* x x))
;    (cond ((and (> a b) (a c)))
    (+ (square (max a b))
       (square (max b c))))

; (sum-square-max-two 4 5 6) => 5² + 6² = 25 + 36 = 61
(sum-square-max-two 4 5 6)
(sum-square-max-two 4 6 5)
(sum-square-max-two 5 4 6)
(sum-square-max-two 5 6 4) ;wrong result!
(sum-square-max-two 6 4 5)