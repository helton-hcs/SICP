; ex1.11: A function f is defined by the rule that
; f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n> 3.
; Write a procedure that computes f by means of a recursive process. Write a procedure that
; computes f by means of an iterative process.

#lang racket

(define (f-recur n)
  (if (< n 3)
      n
      (+ (f-recur (- n 1)) (* 2 (f-recur (- n 2))) (* 3 (f-recur (- n 3))))))

; (define (f-iter n)
;   (define (f-iter-helper n acc)
;     (if (< n 3)
;         acc
;         (f-iter (- n 1) (+ (- n 2) (- n 3)))))
;   (f-iter-helper n 0 0 0 0)

(f-recur 10)