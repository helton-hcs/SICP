#lang scheme

(define (deriv exp var)
  (define variable? symbol?)
  (define (same-variable? v1 v2)
    (and (variable? v1)
         (variable? v2)
         (eq? v1 v2)))
  (define operator cadr)
  (define first-operand car)
  (define second-operand caddr)
  (define (build-operation operator left right)
    (list left operator right))
  (define (=number? exp num)
    (and (number? exp) (= exp num)))
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (build-operation '+ a1 a2))))
  (define (sum? x)
    (eq? (operator x) '+))
  (define addend first-operand)
  (define augend second-operand)
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (build-operation '* m1 m2))))
  (define (product? x)
    (eq? (operator x) '*))
  (define multiplier first-operand)
  (define multiplicand second-operand)
  (define (exponentiation? x)
    (eq? (operator x) '**))
  (define base first-operand)
  (define exponent second-operand)
  (define (make-exponentiation b e)
    (cond ((and (number? e) (eq? e 0)) 1)
          ((and (number? e) (eq? e 1)) b)
          (else (build-operation '** b e))))
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product
           (exponent exp)
           (make-exponentiation
            (base exp)
            (- (exponent exp) 1)))
          (deriv (base exp) var)))         
        (else 
         (error "unknown expression type -- DERIV" exp))))

; testing

(deriv '(x + 3) 'x)
(deriv '(x * y) 'x)
(deriv '((x * y) * (x + 3)) 'x)
(deriv '(x ** 2) 'x)
(deriv '(x ** 3) 'x)
(deriv '(2 * (x ** 3)) 'x)